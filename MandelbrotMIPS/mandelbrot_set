.data
	start: .asciiz "Podaj kolejno szerokosc i wysokosc obrazka:\n"
	filename: .asciiz "mandelbrot.bmp"
	error: .asciiz "blad otwarcia\n"
	.align 2
	header: .space 56
.text

#$s0 - szerokosc obrazka(bez paddingu)
#$s1 - wysokosc obrazka
#$s2 - adres bufora obrazka
#$s3 - adres poczatku pliku
#$s4 - rozmiar obrazka
#$s5 - szerokosc obrazka(padding)
# zmiany na osi wspolrzednych przy przejsciu do nastepnego piksela
#$s6 - 1/szerokosc obrazka (7 cyfr calkowita, 25 cyfr ulamkowa)
#$s7 - 1/wysokosc obrazka (7 cyfr calkowita, 25 cyfr ulamkowa)
	li $v0, 4
	la $a0, start
	syscall
	li $v0, 5
	syscall
	move $s0, $v0
	li $v0, 5
	syscall
	move $s1, $v0

#Padding
	add $t0, $s0, $zero	#mnozenie x3 (x2 + 1)
	sll $t0, $t0, 1
	add $s5, $s0, $t0
	andi $t0, $t0, 0x00000003
	beqz $t0, nopadding
	andi $s5, $s5, 0xfffffffc
	addi $s5, $s5, 4	#zaograglenie 4 w gore
nopadding:

#Naglowek
	la $t0, header
	li $t1, 0x42
	sb $t1, 2($t0)
	li $t1, 0x4d
	sb $t1, 3($t0)

#Alokacja pamieci na obrazek
	mul $t1, $s5, $s1	#wysokosc * szerokosc
	add $s4, $t1, $zero
	li $v0, 9
	add $a0, $t1, $zero
	syscall
	add $s2, $v0, $zero
	addi $t1, $t1, 54	#rozmiar obrazka + naglowek(54 bajty)
	sb $t1, 4($t0)
	li $t1, 54
	sw $t1, 12($t0)	
	li $t1, 40
	sw $t1, 16($t0)		
	add $t1, $s0, $zero
	sw $t1, 20($t0)		#szerokosc
	add $t1, $s1, $zero
	sw $t1, 24($t0)		#wysokosc
	li $t1, 1		#warstwy kolorow
	sw $t1, 28($t0)		
	li $t1, 24		#3 kolory po 8 bitow
	sb $t1, 30($t0)

#Otwieranie pliku
	li $v0, 13
	la $a0, filename
	li $a1, 1
	li $a2, 0
	syscall
	bltz $t0, openerror
	add $s3, $v0, $zero

#Zapisanie naglowka
	li $v0, 15
	add $a0, $s3, $zero
	la $a1, header+2
	li $a2, 54
	syscall
	
#dzielenie pisemne 1/szerokosc i 1/wysokosc (zapis do $s6 i $s7)
	li $t0, 0
	li $t1, 0x02000000
	add $t2, $s0, $zero
	li $t3, 1
nextdigitx:
	srl $t1, $t1, 1
	sll $t3, $t3, 1
	bltz $t1, lastdigitx
	bgt $t2, $t3, nextdigitx
	sub $t3, $t3, $t2
	add $t0, $t0, $t1
	bgtz $t1 nextdigitx
lastdigitx:	
	add $s6, $t0, $zero
	
	li $t0, 0
	li $t1, 0x02000000
	add $t2, $s1, $zero
	li $t3, 1
nextdigity:
	srl $t1, $t1, 1
	sll $t3, $t3, 1
	bltz $t1, lastdigity
	bgt $t2, $t3, nextdigity
	sub $t3, $t3, $t2
	add $t0, $t0, $t1
	bgtz $t1 nextdigity
lastdigity:	
	add $s7, $t0, $zero
	
#7 bitow na czesc calkowita, 25 bitow na czesc ulamkowa
#$t0 - nr piksela w osi x, $t1 - numer piksela w osi y
#(zmienna p w algorytmie) $t2 - wspolrzedna x wyskalowana na os od -2 do 1, $t3 - wspolrzedna y wyskalowana na os od -1 do 1
#$t4, $t5 - zmienna x w algorytmie
	li $t0, 0
	li $t1, 0
	li $t2, 0xfc000000
	li $t3, 0xfe000000
loop:
	li $t9, 0
	add $t4, $t2, $zero
	add $t5, $t3, $zero
mandelbrot:
	mult $t4, $t4
	mfhi $t6
	sll $t6, $t6, 7
	mult $t5, $t5
	mfhi $t7
	sll $t7, $t7, 7
	add $t8, $t6, $t7
	bge $t8, 0x08000000, yes
	add $t9, $t9, 1
	bgt $t9, 50, no
	mult $t4, $t5
	mfhi $t5
	sll $t5, $t5, 8		#x2 i przesuniecie
	sub $t4, $t6, $t7
	add $t4, $t4, $t2
	add $t5, $t5, $t3
	b mandelbrot
yes:
#kolorowanie piksela
	add $t4, $t0, $zero	#mnozenie x3 (x2 + 1)
	sll $t4, $t4, 1
	add $t4, $t4, $t0
	add $t5, $t1, $zero
	mul $t5, $t5, $s5
	add $t4, $t4, $t5
	add $t4, $t4, $s2	#Pozycja piksela wzgledem poczatku pliku
	li $v0, 0xff
	sb $v0, ($t4)
	sb $v0, 1($t4)
	sb $v0, 2($t4)
no:
#nastepny piksel
	add $t0, $t0, 1
	bge $t0, $s0, y
	sll $t4, $s6, 1		#1/szerokosc * 3
	add $t4, $t4, $s6
	add $t2, $t2, $t4
	b loop
y:
	add $t1, $t1, 1
	bge $t1, $s1, loopend
	li $t0, 0
	li $t2, 0xfc000000
	sll $t4, $s7, 1		#1/wysokosc * 2
	add $t3, $t3, $t4
	b loop
loopend:
#Zapisz plik
	li $v0, 15
	add $a0, $s3, $zero
	add $a1, $s2, $zero
	add $a2, $s4, $zero
	syscall
#Zamykanie pliku
	li $v0, 16
	add $a0, $s3, $zero
	syscall
end:
	li $v0, 10
	syscall
openerror:
	la $a0, error
	li $v0, 4
	syscall
	b end	
